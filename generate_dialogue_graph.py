import yaml
from graphviz import Digraph

# dialogueデータの作成（型：dict）
dialogue_data = yaml.safe_load(
    """
dialogue:
- 対談1:
    登場人物:
      - ニーチェ
      - ソクラテス
    テーマ: 人間はなぜ寝るときに目を閉じるのか？
    内容: |
      ニーチェ: ソクラテスよ、人間が寝るときに目を閉じるのはなぜだと思うかね？
      ソクラテス: それは興味深い問いだね、ニーチェ。私見では、目を閉じることで外界からの刺激を遮断し、心を内面に向けることができるからではないかと。
      ニーチェ: なるほど、眠りは内省の時間ということか。だが、目を閉じなくても眠ることはできるはずだ。
      ソクラテス: その通りだ。だが、目を閉じることで、より深い眠りにつくことができる。それは、魂が肉体から解き放たれ、自由に思索を巡らすことができる状態だと言えるかもしれないね。
      ニーチェ: 興味深い見解だ。眠りは死の兄弟とも言われる。目を閉じることは、一時的な死を経験することなのかもしれない。
      ソクラテス: その解釈も面白いね。眠りを通して、我々は死を予見し、魂の永遠性を感じられるのかもしれない。
      ニーチェ: 眠りと目を閉じることについて、まだまだ探求すべきことがありそうだ。この対話はまた続けよう。

- 対談2:
    登場人物:
      - ニーチェ
      - アインシュタイン
    テーマ: もしも重力が逆向きだったら、人生はどう変わるか？
    内容: |
      ニーチェ: アインシュタイン、もしも重力が逆向きだったら、我々の人生はどのように変化すると思うかね？
      アインシュタイン: それは非常に興味深い思考実験だね、ニーチェ。重力が逆向きになれば、物理法則が根本から覆されることになる。
      ニーチェ: 人間は空を飛ぶことができるようになるかもしれない。だが、同時に地面に立つことができなくなるだろう。
      アインシュタイン: 建築物も全く異なる形態をとることになるね。天井から吊るされた家に住むことになるかもしれない。
      ニーチェ: 重力の方向が変わることで、我々の感覚や知覚も大きく変化するだろう。上下の概念が逆転するからね。
      アインシュタイン: 哲学的にも示唆に富んでいるね。我々が当たり前だと思っていることが、実は偶然の産物に過ぎないのかもしれない。
      ニーチェ: 常識を疑い、新たな可能性を探ることの重要性を再認識させられる思考実験だ。
      アインシュタイン: 科学と哲学の融合が、我々の世界観を大きく広げてくれる。この対話を通して、そのことを実感したよ。

- 対談3:
    登場人物:
      - ニーチェ
      - ピカソ
    テーマ: なぜ我々は自分の鼻の先端を見ることができないのか？
    内容: |
      ニーチェ: ピカソ、なぜ我々は自分の鼻の先端を直接見ることができないのだと思うかね？
      ピカソ: それは面白い問いだね、ニーチェ。私見では、我々の視覚の限界を示しているのではないかな。
      ニーチェ: 我々は自分自身の一部を直接知覚することができないということか。
      ピカソ: そうだね。だが、鏡を使えば鼻の先端を見ることができる。つまり、我々は他者の視点を借りることで、自己の全体像を捉えられるということだ。
      ニーチェ: 自己と他者の関係性についての洞察だね。我々は他者なくして自己を知ることはできない。
      ピカソ: 芸術もまた、自己と世界の関係性を探求する営みだと言えるかもしれない。画家は自分の内面を描くことで、自己の姿を客観視できるからね。
      ニーチェ: 哲学と芸学は、ともに人間存在の本質に迫ろうとする試みなのだ。
      ピカソ: 我々は自分の鼻の先端を直接見ることはできないが、思索と創造を通して、自己と世界の真理に近づくことができる。
      ニーチェ: この対話を通して、哲学と芸術の深い結びつきを再確認できた。ありがとう、ピカソ。
"""
)

# Graphvizを使ってグラフを作成。コメントに'Dialogue Graph'を指定。
g = Digraph(comment="Dialogue Graph")

for num, dialogue in enumerate(dialogue_data["dialogue"], start=1):
    dialogue = dialogue["対談" + str(num)]
    # 人物Aと人物Bのノードを作成。ノード形状は楕円形、塗りつぶしあり、水色の背景色を指定。
    for person in dialogue["登場人物"]:
        g.node(person, shape="ellipse", style="filled", fillcolor="lightblue")

    # テーマXのノードを作成。ノード形状は長方形、塗りつぶしあり、黄色の背景色を指定。
    g.node(dialogue["テーマ"], shape="box", style="filled", fillcolor="yellow")

    # 人物Aと人物BのノードをテーマXのノードに接続。
    for person in dialogue["登場人物"]:
        g.edge(person, dialogue["テーマ"])

# グラフの保存と表示
g.render("dialogue_graph", view=True)
